fillAllTable<-function(){
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
for (j in 1:nrow(DATA_Values_FR)) {
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
DATA_Finances<-fillTable(value,url)
DATA_Finances$guid<-url
return(DATA_Finances)
}
DATA_Finances<-getISIN(DATA_Finances)
}
DATA_Finances<-fillAllTable()
fillTable <- function(value,url,print=TRUE) {
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-if(exists(DATA_Finances){nrow(DATA_Finances)}else{0}
m=1
for (i in 1:t) {
for (j in 1:l) {
DATA_Finances[n+m,1]<-gsub('\\r\\n        ','',xmlValue(li[[i]][[1]][[1]][[1]])) #section_title
DATA_Finances[n+m,2]<-gsub('\r\n        ','',xmlValue(li[[i]][[j+1]][[1]][[1]][[1]]))#title
DATA_Finances[n+m,3]<-xmlValue(li[[i]][[j+1]][[1]][[3]][[1]]) #subtitle
DATA_Finances[n+m,4]<-xmlValue(li[[i]][[j+1]][[2]][[2]][[1]]) # valY
DATA_Finances[n+m,5]<-xmlValue(li[[i]][[j+1]][[3]][[2]][[1]]) # valY1
DATA_Finances[n+m,6]<-as.character(value)
DATA_Finances[n+m,7]<-i
DATA_Finances[n+m,8]<-j
DATA_Finances[n+m,9]<-m
m<-m+1
}
}
rm(i,j,t,l,m)#rm(testRow,z)
#DATA_Finances<-subset(DATA_Finances,title!="NA" && valY!="NA") # a revoir, supprime 1 valeur de trop
# del<-c(3:8,15:16,23:24,29:32); DATA_Finances<-DATA_Finances[-del,]
return(DATA_Finances)
}
fillAllTable<-function(){
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
for (j in 1:nrow(DATA_Values_FR)) {
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
DATA_Finances<-fillTable(value,url)
DATA_Finances$guid<-url
return(DATA_Finances)
}
DATA_Finances<-getISIN(DATA_Finances)
}
DATA_Finances<-fillAllTable()
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
for (j in 1:nrow(DATA_Values_FR)) {
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
DATA_Finances<-fillTable(value,url)
DATA_Finances$guid<-url
return(DATA_Finances)
}
DATA_Finances<-getISIN(DATA_Finances)
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
for (j in 1:nrow(DATA_Values_FR)) {
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
DATA_Finances<-fillTable(value,url)
DATA_Finances$guid<-url
#return(DATA_Finances)
}
DATA_Finances<-getISIN(DATA_Finances)
View(DATA_Finances)
subset(DATA_Finances,title!="NA" && valY!="NA")
DATA_Finances2<-subset(DATA_Finances,title!="NA" && valY!="NA") # a revoir, supprime 1 valeur de trop
View(DATA_Finances2)
DATA_Finances2<-subset(DATA_Finances,title!="NA")
View(DATA_Finances2)
DATA_Finances2<-subset(DATA_Finances,valY!="NA")
View(DATA_Finances2)
DATA_Finances2<-subset(DATA_Finances,valY="NA" && valY1="NA")
DATA_Finances2<-subset(DATA_Finances,valY=="NA" && valY1=="NA")
DATA_Finances2<-subset(DATA_Finances,!(valY=="NA" && valY1=="NA"))
View(DATA_Finances2)
DATA_Finances2<- DATA_Finances[ which(valY!="NA" && valY1!="NA") , ]
DATA_Finances2<- DATA_Finances[ which(DATA_Finances$valY!="NA" && DATA_Finances$valY1!="NA") , ]
View(DATA_Finances2)
DATA_Finances2<- DATA_Finances[ which(DATA_Finances$valY!="NA" | DATA_Finances$valY1!="NA") , ]
View(DATA_Finances2)
rm(j)
rm(url,value)
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
for (j in 1:nrow(DATA_Values_FR)) {
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
DATA_Finances<-fillTable(value,url)
DATA_Finances$guid<-url
}
DATA_Finances<- DATA_Finances[ which(DATA_Finances$valY!="NA" | DATA_Finances$valY1!="NA") , ]
DATA_Finances<-getISIN(DATA_Finances)
rm(DATA_Finances2)
rm(j,url,value)
View(DATA_Finances)
fillTable <- function(value,url,print=TRUE) {
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-if(exists(DATA_Finances){nrow(DATA_Finances)}else{0}
m=1
for (i in 1:t) {
for (j in 1:l) {
DATA_Finances[n+m,1]<-gsub('\\r\\n        ','',xmlValue(li[[i]][[1]][[1]][[1]])) #section_title
DATA_Finances[n+m,2]<-gsub('\r\n        ','',xmlValue(li[[i]][[j+1]][[1]][[1]][[1]]))#title
DATA_Finances[n+m,3]<-xmlValue(li[[i]][[j+1]][[1]][[3]][[1]]) #subtitle
DATA_Finances[n+m,4]<-xmlValue(li[[i]][[j+1]][[2]][[2]][[1]]) # valY
DATA_Finances[n+m,5]<-xmlValue(li[[i]][[j+1]][[3]][[2]][[1]]) # valY1
DATA_Finances[n+m,6]<-as.character(value)
DATA_Finances[n+m,7]<-i
DATA_Finances[n+m,8]<-j
DATA_Finances[n+m,9]<-m
DATA_Finances[n+m,10]<-url
m<-m+1
}
}
rm(i,j,t,l,m)
return(DATA_Finances)
}
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0),guid=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
DATA_Finances$guid<-as.character(DATA_Finances$guid)
for (j in 1:nrow(DATA_Values_FR)) {
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
DATA_Finances<-fillTable(value,url)
}
DATA_Finances<- DATA_Finances[ which(DATA_Finances$valY!="NA" | DATA_Finances$valY1!="NA") , ]
DATA_Finances<-getISIN(DATA_Finances)
rm(j,url,value)
View(DATA_Finances)
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0),guid=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
DATA_Finances$guid<-as.character(DATA_Finances$guid)
j=1
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
DATA_Finances<-fillTable(value,url)
View(DATA_Finances)
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0),guid=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
DATA_Finances$guid<-as.character(DATA_Finances$guid)
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-if(exists(DATA_Finances){nrow(DATA_Finances)}else{0}
m=1
fillTable <- function(value,url,print=TRUE) {
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-if(exists(DATA_Finances)){nrow(DATA_Finances)}else{0}
m=1
for (i in 1:t) {
for (j in 1:l) {
DATA_Finances[n+m,1]<-gsub('\\r\\n        ','',xmlValue(li[[i]][[1]][[1]][[1]])) #section_title
DATA_Finances[n+m,2]<-gsub('\r\n        ','',xmlValue(li[[i]][[j+1]][[1]][[1]][[1]]))#title
DATA_Finances[n+m,3]<-xmlValue(li[[i]][[j+1]][[1]][[3]][[1]]) #subtitle
DATA_Finances[n+m,4]<-xmlValue(li[[i]][[j+1]][[2]][[2]][[1]]) # valY
DATA_Finances[n+m,5]<-xmlValue(li[[i]][[j+1]][[3]][[2]][[1]]) # valY1
DATA_Finances[n+m,6]<-as.character(value) # NameISIN
DATA_Finances[n+m,7]<-i
DATA_Finances[n+m,8]<-j
DATA_Finances[n+m,9]<-m
DATA_Finances[n+m,10]<-url #guid
m<-m+1
}
}
rm(i,j,t,l,m)
return(DATA_Finances)
}
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0),guid=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
DATA_Finances$guid<-as.character(DATA_Finances$guid)
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-if(exists(DATA_Finances)){nrow(DATA_Finances)}else{0}
m=1
n<-nrow(DATA_Finances)
fillTable <- function(value,url,print=TRUE) {
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-nrow(DATA_Finances)
m=1
for (i in 1:t) {
for (j in 1:l) {
DATA_Finances[n+m,1]<-gsub('\\r\\n        ','',xmlValue(li[[i]][[1]][[1]][[1]])) #section_title
DATA_Finances[n+m,2]<-gsub('\r\n        ','',xmlValue(li[[i]][[j+1]][[1]][[1]][[1]]))#title
DATA_Finances[n+m,3]<-xmlValue(li[[i]][[j+1]][[1]][[3]][[1]]) #subtitle
DATA_Finances[n+m,4]<-xmlValue(li[[i]][[j+1]][[2]][[2]][[1]]) # valY
DATA_Finances[n+m,5]<-xmlValue(li[[i]][[j+1]][[3]][[2]][[1]]) # valY1
DATA_Finances[n+m,6]<-as.character(value) # NameISIN
DATA_Finances[n+m,7]<-i
DATA_Finances[n+m,8]<-j
DATA_Finances[n+m,9]<-m
DATA_Finances[n+m,10]<-url #guid
m<-m+1
}
}
rm(i,j,t,l,m)
return(DATA_Finances)
}
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-nrow(DATA_Finances)
m=1
DATA_Finances[n+m,1]<-gsub('\\r\\n        ','',xmlValue(li[[i]][[1]][[1]][[1]])) #section_title
i=1
j=1
DATA_Finances[n+m,1]<-gsub('\\r\\n        ','',xmlValue(li[[i]][[1]][[1]][[1]])) #section_title
DATA_Finances[n+m,2]<-gsub('\r\n        ','',xmlValue(li[[i]][[j+1]][[1]][[1]][[1]]))#title
DATA_Finances[n+m,3]<-xmlValue(li[[i]][[j+1]][[1]][[3]][[1]]) #subtitle
DATA_Finances[n+m,4]<-xmlValue(li[[i]][[j+1]][[2]][[2]][[1]]) # valY
DATA_Finances[n+m,5]<-xmlValue(li[[i]][[j+1]][[3]][[2]][[1]]) # valY1
DATA_Finances[n+m,6]<-as.character(value) # NameISIN
DATA_Finances[n+m,7]<-i
DATA_Finances[n+m,8]<-j
DATA_Finances[n+m,9]<-m
View(DATA_Finances)
DATA_Finances[n+m,10]<-url #guid
View(DATA_Finances)
fillTable <- function(value,url,print=TRUE) {
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-nrow(DATA_Finances)
m=1
for (i in 1:t) {
for (j in 1:l) {
DATA_Finances[n+m,1]<-gsub('\\r\\n        ','',xmlValue(li[[i]][[1]][[1]][[1]])) #section_title
DATA_Finances[n+m,2]<-gsub('\r\n        ','',xmlValue(li[[i]][[j+1]][[1]][[1]][[1]]))#title
DATA_Finances[n+m,3]<-xmlValue(li[[i]][[j+1]][[1]][[3]][[1]]) #subtitle
DATA_Finances[n+m,4]<-xmlValue(li[[i]][[j+1]][[2]][[2]][[1]]) # valY
DATA_Finances[n+m,5]<-xmlValue(li[[i]][[j+1]][[3]][[2]][[1]]) # valY1
DATA_Finances[n+m,6]<-as.character(value) # NameISIN
DATA_Finances[n+m,7]<-i
DATA_Finances[n+m,8]<-j
DATA_Finances[n+m,9]<-m
DATA_Finances[n+m,10]<-url #guid
m<-m+1
}
}
rm(i,j,t,l,m)
return(DATA_Finances)
}
rm(DATA_Finances)
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0),NameISIN=character(0),i=character(0),j=character(0),m=character(0),guid=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
DATA_Finances$NameISIN<-as.character(DATA_Finances$NameISIN)
DATA_Finances$i<-as.character(DATA_Finances$i)
DATA_Finances$j<-as.character(DATA_Finances$j)
DATA_Finances$m<-as.character(DATA_Finances$m)
DATA_Finances$guid<-as.character(DATA_Finances$guid)
for (j in 1:nrow(DATA_Values_FR)) {
value<-DATA_Values_FR$NameISIN[j]
url<-paste("http://www.zonebourse.com/",value,"/fondamentaux/",sep="")
DATA_Finances<-fillTable(value,url)
}
DATA_Finances<- DATA_Finances[ which(DATA_Finances$valY!="NA" | DATA_Finances$valY1!="NA") , ]
DATA_Finances<-getISIN(DATA_Finances)
rm(j,url,value)
source("init.R")
# #############################################################################################"
# Set Directory
# #############################################################################################"
saveDir<-getwd()
dataDir<-paste(getwd(),"/Data/",sep="")
dir<-paste(dataDir,"yahooFinance/",sep="")
setwd(dir)
rm(dir,dataDir)
# #############################################################################################"
# Tickers names
# List of companies for nasdaq and nyse
#URL<-"http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=nasdaq&render=download"
#URL<-"http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=nyse&render=download"
#URL<-"http://www.nasdaq.com/screening/companies-by-name.aspx?letter=0&exchange=cac40&render=download"
#destFile<-"companylist.csv"
#download.file(URL,destFile)
# #############################################################################################"
# Tickers names
# List of companies for Cac40 (^FCHI) -Paris
url<-"http://finance.yahoo.com/q/cp?s=%5EFCHI"
script <- getURL(url)
doc <- htmlParse(script)
# get column names
li <- getNodeSet(doc, "//th[@class='yfnc_tablehead1']")
colsL<-length(li)
colNames<- as.list(rep(NA, colsL))
for(i in 1:colsL){colNames[i]<-xmlValue(li[[i]][[1]])}
# create table
rm(cac40_tickers)
cac40_tickers<-data.frame(matrix(ncol = colsL, nrow = 40))
names(cac40_tickers)<-colNames
cac40_tickers_list<-""
#get column values
li <- getNodeSet(doc, "//td[@class='yfnc_tabledata1']")
for(i in 1:40){
# code
cac40_tickers[i,1]<-xmlValue(li[[1+5*(i-1)]][[1]][[1]][[1]])
# nom
cac40_tickers[i,2]<-xmlValue(li[[2+5*(i-1)]][[1]])
# je ne récupère pas les autres valeurs
cac40_tickers_list<-paste(cac40_tickers_list,cac40_tickers[i,1],sep=",")
}
rm(url,script,doc,li,colsL,colNames)
# #############################################################################################"
# voir la documentation pour construire les urls ici
# http://www.canbike.org/information-technology/yahoo-finance-url-download-to-a-csv-file.html
#http://download.finance.yahoo.com/d/quotes.csv?s=IBM&f=nl1r&e=.csv
#http://download.finance.yahoo.com/d/quotes.csv?s=IBM&f=sl1d1t1c1ohgv&e=.csv
# #############################################################################################"
# all tags are in the tag.csv file
tags<-read.csv("tags.csv",sep=";",header=TRUE)
# concatener tous les tags
# aa2a5bb2b3b4b6cc1c3c4c6c8dd1d2ee1e7e8e9f0f6gg1g3g4g5g6hii5jj1j2j3j4j5j6kk1k2k3k4k5ll1l2l3mm2m3m4m5m6m7m8nn4opp1p2p5p6qrr1r2r5r6r7ss1s6s7t1t6t7t8vv1v7ww1w4xy
names<-c('Ask','Average Daily Volume','Ask Size','Bid','Ask (Real-time)','Bid (Real-time)','Book Value','Bid Size','Change & Percent Change','Change','Commission','Currency','Change (Real-time)','After Hours Change (Real-time)','Dividend/Share','Last Trade Date','Trade Date','Earnings/Share','Error Indication (returned for symbol changed / invalid)','EPS Estimate Current Year','EPS Estimate Next Year','EPS Estimate Next Quarter','Trade Links Additional','Float Shares','Day’s Low','Holdings Gain Percent','Annualized Gain','Holdings Gain','Holdings Gain Percent (Real-time)','Holdings Gain (Real-time)','Day’s High','More Info','Order Book (Real-time)','52-week Low','Market Capitalization','Shares Outstanding','Market Cap (Real-time)','EBITDA','Change From 52-week Low','Percent Change From 52-week Low','52-week High','Last Trade (Real-time) With Time','Change Percent (Real-time)','Last Trade Size','Change From 52-week High','Percent Change From 52-week High','Last Trade (With Time)','Last Trade (Price Only)','High Limit','Low Limit','Day’s Range','Day’s Range (Real-time)','50-day Moving Average','200-day Moving Average','Change From 200-day Moving Average','Percent Change From 200-day Moving Average','Change From 50-day Moving Average','Percent Change From 50-day Moving Average','Name','Notes','Open','Previous Close','Price Paid','Change in Percent','Price/Sales','Price/Book','Ex-Dividend Date','P/E Ratio','Dividend Pay Date','P/E Ratio (Real-time)','PEG Ratio','Price/EPS Estimate Current Year','Price/EPS Estimate Next Year','Symbol','Shares Owned','Revenue','Short Ratio','Last Trade Time','Trade Links','Ticker Trend','1 yr Target Price','Volume','Holdings Value','Holdings Value (Real-time)','52-week Range','Day’s Value Change','Day’s Value Change (Real-time)','Stock Exchange','Dividend Yield')
# #############################################################################################"
tickerSymbols<-cac40_tickers_list
tagsToRead<-"aa2a5bb2b3b4b6cc1c3c4c6c8dd1d2ee1e7e8e9f0f6gg1g3g4g5g6hii5jj1j2j3j4j5j6kk1k2k3k4k5ll1l2l3mm2m3m4m5m6m7m8nn4opp1p2p5p6qrr1r2r5r6r7ss1s6s7t1t6t7t8vv1v7ww1w4xy"
# #############################################################################################"
URL<-paste("http://download.finance.yahoo.com/d/quotes.csv?s=",tickerSymbols,"&f=",tagsToRead,"&e=.csv",sep="")
destFile<-"quotes.csv"
download.file(URL,destFile)
# #############################################################################################"
# read downloaded file
# avec ça, j'ai les cotations du CAC40 à l'instant t
# J'ai l'Open du jour et le PreviousClose
quotes_now<-read.csv(destFile,sep=",",header=FALSE)
names(quotes_now)<-make.names(names,unique = FALSE, allow_ = TRUE)
# reste à faire: passer dans les bons formats
# par ex tous les champs qui ont "Date" dans leur nom
#quotes_now$date<-as.Date(quotes_now$date, "%d/%m/%y")
# #############################################################################################"
# Historical data for one value per day
# url directe de téléchargement pour une valeur
# url<-"http://real-chart.finance.yahoo.com/table.csv?s=AC.PA&d=4&e=15&f=2015&g=d&a=0&b=3&c=2000&ignore=.csv"
quotesPerDay<-data.frame(Date=as.Date(character(0)),Open=numeric(0),High=numeric(0),Low=numeric(0),Close=numeric(0),Volume=integer(0),Adj.Close=numeric(0),Symbol=character(0))
begin<-Sys.Date()-365*10
begin<-format(begin,"&a=%m&b=%d&c=%Y")
end<-Sys.Date()
end<-format(end,"&d=%m&e=%d&f=%Y")
for (i in 1:40){
ticker<-cac40_tickers[i,1]
url<-paste("http://real-chart.finance.yahoo.com/table.csv?s=",ticker,begin,"&g=d",end,"&ignore=.csv",sep="")
# Download
destFile<-paste("quotesPerDay_",ticker,".csv",sep="")
download.file(url,destFile)
# Read file
rm(quotesPerDay_tmp)
quotesPerDay_tmp<-read.csv(destFile,sep=",",header=TRUE)
quotesPerDay_tmp$Date<-as.Date(quotesPerDay_tmp$Date)
quotesPerDay_tmp$Symbol<-ticker
# Add to all values' file
quotesPerDay<-rbind(quotesPerDay,quotesPerDay_tmp)
if(file.exists(destFile)){file.remove(destFile)}
}
rm(destFile,begin,end,i,URL,url,quotesPerDay_tmp)
# #############################################################################################"
rm(URL,url,destFile,i,j,cac40_tickers_list,tagsToRead,tickerSymbols,names)
setwd(saveDir)
names<-c('Ask','Average Daily Volume','Ask Size','Bid','Ask (Real-time)','Bid (Real-time)','Book Value','Bid Size','Change & Percent Change','Change','Commission','Currency','Change (Real-time)','After Hours Change (Real-time)','Dividend/Share','Last Trade Date','Trade Date','Earnings/Share','Error Indication (returned for symbol changed / invalid)','EPS Estimate Current Year','EPS Estimate Next Year','EPS Estimate Next Quarter','Trade Links Additional','Float Shares','Day’s Low','Holdings Gain Percent','Annualized Gain','Holdings Gain','Holdings Gain Percent (Real-time)','Holdings Gain (Real-time)','Day’s High','More Info','Order Book (Real-time)','52-week Low','Market Capitalization','Shares Outstanding','Market Cap (Real-time)','EBITDA','Change From 52-week Low','Percent Change From 52-week Low','52-week High','Last Trade (Real-time) With Time','Change Percent (Real-time)','Last Trade Size','Change From 52-week High','Percent Change From 52-week High','Last Trade (With Time)','Last Trade (Price Only)','High Limit','Low Limit','Day’s Range','Day’s Range (Real-time)','50-day Moving Average','200-day Moving Average','Change From 200-day Moving Average','Percent Change From 200-day Moving Average','Change From 50-day Moving Average','Percent Change From 50-day Moving Average','Name','Notes','Open','Previous Close','Price Paid','Change in Percent','Price/Sales','Price/Book','Ex-Dividend Date','P/E Ratio','Dividend Pay Date','P/E Ratio (Real-time)','PEG Ratio','Price/EPS Estimate Current Year','Price/EPS Estimate Next Year','Symbol','Shares Owned','Revenue','Short Ratio','Last Trade Time','Trade Links','Ticker Trend','1 yr Target Price','Volume','Holdings Value','Holdings Value (Real-time)','52-week Range','Day’s Value Change','Day’s Value Change (Real-time)','Stock Exchange','Dividend Yield')
names<-str_replace_all(names,"[[:punct:]\\\s]+","_")
names<-str_replace_all(names,"[[:punct:]","_")
names<-str_replace_all(names,"[[:punct:]]","_")
names
names<-c('Ask','Average Daily Volume','Ask Size','Bid','Ask (Real-time)','Bid (Real-time)','Book Value','Bid Size','Change & Percent Change','Change','Commission','Currency','Change (Real-time)','After Hours Change (Real-time)','Dividend/Share','Last Trade Date','Trade Date','Earnings/Share','Error Indication (returned for symbol changed / invalid)','EPS Estimate Current Year','EPS Estimate Next Year','EPS Estimate Next Quarter','Trade Links Additional','Float Shares','Day’s Low','Holdings Gain Percent','Annualized Gain','Holdings Gain','Holdings Gain Percent (Real-time)','Holdings Gain (Real-time)','Day’s High','More Info','Order Book (Real-time)','52-week Low','Market Capitalization','Shares Outstanding','Market Cap (Real-time)','EBITDA','Change From 52-week Low','Percent Change From 52-week Low','52-week High','Last Trade (Real-time) With Time','Change Percent (Real-time)','Last Trade Size','Change From 52-week High','Percent Change From 52-week High','Last Trade (With Time)','Last Trade (Price Only)','High Limit','Low Limit','Day’s Range','Day’s Range (Real-time)','50-day Moving Average','200-day Moving Average','Change From 200-day Moving Average','Percent Change From 200-day Moving Average','Change From 50-day Moving Average','Percent Change From 50-day Moving Average','Name','Notes','Open','Previous Close','Price Paid','Change in Percent','Price/Sales','Price/Book','Ex-Dividend Date','P/E Ratio','Dividend Pay Date','P/E Ratio (Real-time)','PEG Ratio','Price/EPS Estimate Current Year','Price/EPS Estimate Next Year','Symbol','Shares Owned','Revenue','Short Ratio','Last Trade Time','Trade Links','Ticker Trend','1 yr Target Price','Volume','Holdings Value','Holdings Value (Real-time)','52-week Range','Day’s Value Change','Day’s Value Change (Real-time)','Stock Exchange','Dividend Yield')
names<-str_replace_all(names,"[[:punct:]]","")
names
names<-str_replace_all(names,"'","")
names
names<-str_replace_all(names,"’","")
names
