table$Name<-as.data.frame(str_match(table$NameISIN, "^(.*)-([0-9]*)$")[,-1])[,1]
table$ISIN<-as.data.frame(str_match(table$NameISIN, "^(.*)-([0-9]*)$")[,-1])[,2]
table<- subset(table, select=(-NameISIN))
return(table)
}
Invests$enclosure<-""
DATA_RSS<-rbind(Actions,Invests,Indices,Forex,Warrants,Turbos,Actualites)
DATA_RSS<-getISIN(DATA_RSS)
DATA_RSS<- subset(DATA_RSS, select=c(-enclosure,-guid))
rm(Actions,Invests,Indices,Forex,Warrants,Turbos,Actualites)
# ##############################################################################################################
# Aspiration des pages Zonebourse.com
# ##############################################################################################################
# ##############################################################################################################
# Récupérer liste de toutes les valeurs France  Zonebourse.com
# ##############################################################################################################
url<-"http://www.zonebourse.com/bourse/actions/Europe-3/France-51/"
getValuesList <- function(url,j,print=TRUE) {
script <- getURL(url)
doc <- htmlParse(script)
for (i in 1:50) {
#get NameISIN
li <- getNodeSet(doc, paste("//td[@id='iAL",i,"']",sep=""))
if (length(li)==0) break
DATA_Values_FR[(j-1)*50+i,1]<-gsub("/","",xmlGetAttr(li[[1]][[1]],"href"))
#get secteur
li <- getNodeSet(doc, "//td[@class='large200 center']")
DATA_Values_FR[(j-1)*50+i,2]<-xmlGetAttr(li[[i]][[1]],"title")
# get Var1janv and Capitalisation_MUSD
li <- getNodeSet(doc, "//td[@class='large70 right pright20']")
DATA_Values_FR[(j-1)*50+i,3]<-xmlValue(li[[i*2-1]][[1]][[1]])
DATA_Values_FR[(j-1)*50+i,4]<-xmlValue(li[[i*2]][[1]])
#get NoteInvestissement
li <- getNodeSet(doc, "//td[@class='large110 center']")
val<-xmlGetAttr(li[[i]][[1]],"title")
DATA_Values_FR[(j-1)*50+i,5]<-if(is.null(val)){NA}else{val}
#get trends Court Moyen Long terme
li <- getNodeSet(doc, "//td[@class='large20 center']")
DATA_Values_FR[(j-1)*50+i,6]<-if(is.null(li[[i*3-2]][[1]][[1]])){NA}else{strsplit(strsplit(xmlGetAttr(li[[i*3-2]][[1]][[1]],"src"),'.',fixed=TRUE)[[1]][[1]],'_',fixed=TRUE)[[1]][[2]]}
DATA_Values_FR[(j-1)*50+i,7]<-if(is.null(li[[i*3-1]][[1]][[1]])){NA}else{strsplit(strsplit(xmlGetAttr(li[[i*3-1]][[1]][[1]],"src"),'.',fixed=TRUE)[[1]][[1]],'_',fixed=TRUE)[[1]][[2]]}
DATA_Values_FR[(j-1)*50+i,8]<-if(is.null(li[[i*3]][[1]][[1]])){NA}else{strsplit(strsplit(xmlGetAttr(li[[i*3]][[1]][[1]],"src"),'.',fixed=TRUE)[[1]][[1]],'_',fixed=TRUE)[[1]][[2]]}
#get page and row
DATA_Values_FR[(j-1)*50+i,9]<-j
DATA_Values_FR[(j-1)*50+i,10]<-i
}
rm(script,doc,li,i,j,val)
return(DATA_Values_FR)
}
rm(DATA_Values_FR)
DATA_Values_FR<-data.frame(NameISIN=character(0),secteur=character(0),Var1janv=character(0),Capitalisation_MUSD=character(0),NoteInvestissement=character(0),CourtTerme=character(0),MoyenTerme=character(0),LongTerme=character(0),page=numeric(0),ligne=numeric(0))
DATA_Values_FR$NameISIN<-as.character(DATA_Values_FR$NameISIN);DATA_Values_FR$secteur<-as.character(DATA_Values_FR$secteur);
DATA_Values_FR$Var1janv<-as.character(DATA_Values_FR$Var1janv);DATA_Values_FR$Capitalisation_MUSD<-as.character(DATA_Values_FR$Capitalisation_MUSD);
DATA_Values_FR$NoteInvestissement<-as.character(DATA_Values_FR$NoteInvestissement);DATA_Values_FR$CourtTerme<-as.character(DATA_Values_FR$CourtTerme);
DATA_Values_FR$MoyenTerme<-as.character(DATA_Values_FR$MoyenTerme);DATA_Values_FR$LongTerme<-as.character(DATA_Values_FR$LongTerme);
DATA_Values_FR$page<-as.character(DATA_Values_FR$page);DATA_Values_FR$ligne<-as.character(DATA_Values_FR$ligne);
for (j in 1:20) {
url<-paste("http://www.zonebourse.com/bourse/actions/Europe-3/France-51/?Req=&p=",j,sep="")
DATA_Values_FR<-getValuesList(url,j)
}
# ##############################################################################################################
# Aspirateur page Finances d'une valeur Zonebourse.com
# ##############################################################################################################
library(RCurl)
library(XML)
# ok pour une valeur, reste à boucler pour toutes les valeurs -- voir dans la table DATA_Values_FR
url<-"http://www.zonebourse.com/GENFIT-16311755/fondamentaux/"
url<-"http://www.zonebourse.com/AXA-4615/fondamentaux/"
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
fillTable <- function(li,print=TRUE) {
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-t*l #total de lignes # du coup trop large
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
m=1
for (i in 1:t) {
for (j in 1:l) {
DATA_Finances[m,1]<-gsub('\\r\\n        ','',xmlValue(li[[i]][[1]][[1]][[1]])) #section_title
DATA_Finances[m,2]<-gsub('\r\n        ','',xmlValue(li[[i]][[j+1]][[1]][[1]][[1]]))#title
DATA_Finances[m,3]<-xmlValue(li[[i]][[j+1]][[1]][[3]][[1]]) #subtitle
DATA_Finances[m,4]<-xmlValue(li[[i]][[j+1]][[2]][[2]][[1]]) # valY
DATA_Finances[m,5]<-xmlValue(li[[i]][[j+1]][[3]][[2]][[1]]) # valY1
m<-m+1
}
}
rm(i,j,n,t,l,m,k,z)#rm(testRow,z)
#DATA_Finances<-subset(DATA_Finances,title!="NA" && valY!="NA") # a revoir, supprime 1 valeur de trop
del<-c(3:8,15:16,23:24,29:32); DATA_Finances<-DATA_Finances[-del,]
return(DATA_Finances)
}
rm(DATA_Finances)
DATA_Finances<-fillTable(li)
DATA_Finances$guid<-url
DATA_Finances<-getISIN(DATA_Finances)
View(DATA_RSS)
View(DATA_Finances)
View(DATA_Values_FR)
library(XML)
library(stringr)
library(RCurl)
library(XML)
#install.packages("XML")
library(XML)
library(stringr)
# ##############################################################################################################
#Flux rss Zonebourse.com
# ##############################################################################################################
# fonction de lecture d'un flux
getRSSitems <- function(RSSURL,level,print=TRUE) {
doc<-xmlTreeParse(RSSURL)
src<-xpathApply(xmlRoot(doc),paste( "//",level,sep=""))
for (i in 1:length(src)) {
if (i==1) {
foo<-xmlSApply(src[[i]], xmlValue)
DATA<-data.frame(t(foo), stringsAsFactors=FALSE)
}
else {
foo<-xmlSApply(src[[i]], xmlValue)
tmp<-data.frame(t(foo), stringsAsFactors=FALSE)
DATA<-rbind(DATA, tmp)
}
}
rm(doc)
rm(src)
return(DATA)
}
level<-"item"
Actions <- getRSSitems("http://www.zonebourse.com/rss/FeedAnalyses.php?type=Actions",level) #Stratégie de Trading
Invests <- getRSSitems("http://www.zonebourse.com/rss/FeedAnalysesFondamentales.php",level)#Stratégie d'investissement
Indices <- getRSSitems("http://www.zonebourse.com/rss/FeedAnalyses.php?type=Indices",level) #Stratégie Indices
Forex <- getRSSitems("http://www.zonebourse.com/rss/FeedAnalyses.php?type=Forex",level) #Stratégie Forex
Warrants <- getRSSitems("http://www.zonebourse.com/rss/FeedAnalyses.php?type=Warrants",level) #Stratégie Warrants
Turbos <- getRSSitems("http://www.zonebourse.com/rss/FeedAnalyses.php?type=Turbos",level) #Stratégie Turbos
#Barons <- getRSSitems("http://www.zonebourse.com/rss/FeedBaronsBourse.php",level)# Barons de la bourse
Actualites <- getRSSitems("http://www.zonebourse.com/rss/FeedAnalyses.php",level)# Toute l'actualité
getISIN<-function(table){
#a partir de guid récupérer nom et isin
table$NameISIN<-t(data.frame(strsplit(as.character(table$guid),"/",fixed=TRUE))[4,])
table$Name<-as.data.frame(str_match(table$NameISIN, "^(.*)-([0-9]*)$")[,-1])[,1]
table$ISIN<-as.data.frame(str_match(table$NameISIN, "^(.*)-([0-9]*)$")[,-1])[,2]
table<- subset(table, select=(-NameISIN))
return(table)
}
Invests$enclosure<-""
DATA_RSS<-rbind(Actions,Invests,Indices,Forex,Warrants,Turbos,Actualites)
DATA_RSS<-getISIN(DATA_RSS)
DATA_RSS<- subset(DATA_RSS, select=c(-enclosure,-guid))
rm(Actions,Invests,Indices,Forex,Warrants,Turbos,Actualites)
# ##############################################################################################################
# Aspiration des pages Zonebourse.com
# ##############################################################################################################
# ##############################################################################################################
# Récupérer liste de toutes les valeurs France  Zonebourse.com
# ##############################################################################################################
url<-"http://www.zonebourse.com/bourse/actions/Europe-3/France-51/"
getValuesList <- function(url,j,print=TRUE) {
script <- getURL(url)
doc <- htmlParse(script)
for (i in 1:50) {
#get NameISIN
li <- getNodeSet(doc, paste("//td[@id='iAL",i,"']",sep=""))
if (length(li)==0) break
DATA_Values_FR[(j-1)*50+i,1]<-gsub("/","",xmlGetAttr(li[[1]][[1]],"href"))
#get secteur
li <- getNodeSet(doc, "//td[@class='large200 center']")
DATA_Values_FR[(j-1)*50+i,2]<-xmlGetAttr(li[[i]][[1]],"title")
# get Var1janv and Capitalisation_MUSD
li <- getNodeSet(doc, "//td[@class='large70 right pright20']")
DATA_Values_FR[(j-1)*50+i,3]<-xmlValue(li[[i*2-1]][[1]][[1]])
DATA_Values_FR[(j-1)*50+i,4]<-xmlValue(li[[i*2]][[1]])
#get NoteInvestissement
li <- getNodeSet(doc, "//td[@class='large110 center']")
val<-xmlGetAttr(li[[i]][[1]],"title")
DATA_Values_FR[(j-1)*50+i,5]<-if(is.null(val)){NA}else{val}
#get trends Court Moyen Long terme
li <- getNodeSet(doc, "//td[@class='large20 center']")
DATA_Values_FR[(j-1)*50+i,6]<-if(is.null(li[[i*3-2]][[1]][[1]])){NA}else{strsplit(strsplit(xmlGetAttr(li[[i*3-2]][[1]][[1]],"src"),'.',fixed=TRUE)[[1]][[1]],'_',fixed=TRUE)[[1]][[2]]}
DATA_Values_FR[(j-1)*50+i,7]<-if(is.null(li[[i*3-1]][[1]][[1]])){NA}else{strsplit(strsplit(xmlGetAttr(li[[i*3-1]][[1]][[1]],"src"),'.',fixed=TRUE)[[1]][[1]],'_',fixed=TRUE)[[1]][[2]]}
DATA_Values_FR[(j-1)*50+i,8]<-if(is.null(li[[i*3]][[1]][[1]])){NA}else{strsplit(strsplit(xmlGetAttr(li[[i*3]][[1]][[1]],"src"),'.',fixed=TRUE)[[1]][[1]],'_',fixed=TRUE)[[1]][[2]]}
#get page and row
DATA_Values_FR[(j-1)*50+i,9]<-j
DATA_Values_FR[(j-1)*50+i,10]<-i
}
rm(script,doc,li,i,j,val)
return(DATA_Values_FR)
}
rm(DATA_Values_FR)
DATA_Values_FR<-data.frame(NameISIN=character(0),secteur=character(0),Var1janv=character(0),Capitalisation_MUSD=character(0),NoteInvestissement=character(0),CourtTerme=character(0),MoyenTerme=character(0),LongTerme=character(0),page=numeric(0),ligne=numeric(0))
DATA_Values_FR$NameISIN<-as.character(DATA_Values_FR$NameISIN);DATA_Values_FR$secteur<-as.character(DATA_Values_FR$secteur);
DATA_Values_FR$Var1janv<-as.character(DATA_Values_FR$Var1janv);DATA_Values_FR$Capitalisation_MUSD<-as.character(DATA_Values_FR$Capitalisation_MUSD);
DATA_Values_FR$NoteInvestissement<-as.character(DATA_Values_FR$NoteInvestissement);DATA_Values_FR$CourtTerme<-as.character(DATA_Values_FR$CourtTerme);
DATA_Values_FR$MoyenTerme<-as.character(DATA_Values_FR$MoyenTerme);DATA_Values_FR$LongTerme<-as.character(DATA_Values_FR$LongTerme);
DATA_Values_FR$page<-as.character(DATA_Values_FR$page);DATA_Values_FR$ligne<-as.character(DATA_Values_FR$ligne);
for (j in 1:20) {
url<-paste("http://www.zonebourse.com/bourse/actions/Europe-3/France-51/?Req=&p=",j,sep="")
DATA_Values_FR<-getValuesList(url,j)
}
# ##############################################################################################################
# Aspirateur page Finances d'une valeur Zonebourse.com
# ##############################################################################################################
library(RCurl)
library(XML)
# ok pour une valeur, reste à boucler pour toutes les valeurs -- voir dans la table DATA_Values_FR
url<-"http://www.zonebourse.com/GENFIT-16311755/fondamentaux/"
url<-"http://www.zonebourse.com/AXA-4615/fondamentaux/"
script <- getURL(url)
doc <- htmlParse(script)
li <- getNodeSet(doc, "//table[@class='ReutersTabInit']")
rm(script,doc)#rm(url);
fillTable <- function(li,print=TRUE) {
rows <- lapply(li, xpathSApply, "//tr[@class='ReutersTabOdd']", xmlValue)
rows[sapply(rows, is.list)] <- NA
t<-length(li) # nombre de tableaux
l<-lapply(rows, length)[[1]][[1]] # nombre de lignes dans chaque tableau #pb n'est pas le meme dans chaque
n<-t*l #total de lignes # du coup trop large
DATA_Finances<-data.frame(section=character(0),title=character(0),subtitle=character(0),valY=character(0),valY1=character(0))
DATA_Finances$section<-as.character(DATA_Finances$section)
DATA_Finances$title<-as.character(DATA_Finances$title)
DATA_Finances$subtitle<-as.character(DATA_Finances$subtitle)
DATA_Finances$valY<-as.character(DATA_Finances$valY)
DATA_Finances$valY1<-as.character(DATA_Finances$valY1)
m=1
for (i in 1:t) {
for (j in 1:l) {
DATA_Finances[m,1]<-gsub('\\r\\n        ','',xmlValue(li[[i]][[1]][[1]][[1]])) #section_title
DATA_Finances[m,2]<-gsub('\r\n        ','',xmlValue(li[[i]][[j+1]][[1]][[1]][[1]]))#title
DATA_Finances[m,3]<-xmlValue(li[[i]][[j+1]][[1]][[3]][[1]]) #subtitle
DATA_Finances[m,4]<-xmlValue(li[[i]][[j+1]][[2]][[2]][[1]]) # valY
DATA_Finances[m,5]<-xmlValue(li[[i]][[j+1]][[3]][[2]][[1]]) # valY1
m<-m+1
}
}
rm(i,j,n,t,l,m,k,z)#rm(testRow,z)
#DATA_Finances<-subset(DATA_Finances,title!="NA" && valY!="NA") # a revoir, supprime 1 valeur de trop
del<-c(3:8,15:16,23:24,29:32); DATA_Finances<-DATA_Finances[-del,]
return(DATA_Finances)
}
rm(DATA_Finances)
DATA_Finances<-fillTable(li)
DATA_Finances$guid<-url
DATA_Finances<-getISIN(DATA_Finances)
View(DATA_Values_FR)
rm(airquality)
rm(movies)
rm(j,levle,li,url)
rm(j,level,li,url)
source("C:/Users/Jawad/Documents/GitHub/prediction-bourse/init.R")
# #############################################################################################"
# Set Directory
# #############################################################################################"
saveDir<-getwd()
dataDir<-paste(getwd(),"/Data/",sep="")
dir<-paste(dataDir,"yahooFinance/",sep="")
setwd(dir)
rm(dir,dataDir)
stocks<-c("GDAXI","FCHI")
rm(tickers)
tickers<-data.frame(matrix(ncol = 3, nrow = 0))
names(tickers)<-c("Symbol","Name","Stock")
tickers_list<-""
#destFile<-"companylist.csv"
#download.file(URL,destFile)
# #############################################################################################"
# Tickers names
# List of companies for Cac40 (^FCHI) -Paris
# List of companies for Dax (^GDAXI)
stocks<-c("GDAXI","FCHI")
rm(tickers)
tickers<-data.frame(matrix(ncol = 3, nrow = 0))
names(tickers)<-c("Symbol","Name","Stock")
tickers_list<-""
for (stock in stocks){
#stock<-"GDAXI"
url<-paste("http://finance.yahoo.com/q/cp?s=%5E",stock,sep="")
script <- getURL(url)
doc <- htmlParse(script)
#get column values
li <- getNodeSet(doc, "//td[@class='yfnc_tabledata1']")
rm(tickers_tmp)
j<-length(li)/5
tickers_tmp<-data.frame(matrix(ncol = 3, nrow = j))
names(tickers_tmp)<-c("Symbol","Name","Stock")
for(i in 1:j){
# code
tickers_tmp[i,1]<-xmlValue(li[[1+5*(i-1)]][[1]][[1]][[1]])
# nom
tickers_tmp[i,2]<-xmlValue(li[[2+5*(i-1)]][[1]])
# stock
tickers_tmp[i,3]<-stock
# je ne récupère pas les autres valeurs
tickers_list<-paste(tickers_list,tickers_tmp[i,1],sep=",")
}
tickers<-rbind(tickers,tickers_tmp)
}
tickers_list<-substring(tickers_list, 2)
rm(url,script,doc,li,tickers_tmp,i,j,stocks,stock)
#destFile<-"companylist.csv"
#download.file(URL,destFile)
# #############################################################################################"
# Tickers names
# List of companies for Cac40 (^FCHI) -Paris
# List of companies for Dax (^GDAXI)
stocks<-c("GDAXI","FCHI")
rm(tickers)
tickers<-data.frame(matrix(ncol = 3, nrow = 0))
names(tickers)<-c("Symbol","Name","Stock")
tickers_list<-""
for (stock in stocks){
#stock<-"GDAXI"
url<-paste("http://finance.yahoo.com/q/cp?s=%5E",stock,sep="")
script <- getURL(url)
doc <- htmlParse(script)
#get column values
li <- getNodeSet(doc, "//td[@class='yfnc_tabledata1']")
rm(tickers_tmp)
j<-length(li)/5
tickers_tmp<-data.frame(matrix(ncol = 3, nrow = j))
names(tickers_tmp)<-c("Symbol","Name","Stock")
for(i in 1:j){
# code
tickers_tmp[i,1]<-xmlValue(li[[1+5*(i-1)]][[1]][[1]][[1]])
# nom
tickers_tmp[i,2]<-xmlValue(li[[2+5*(i-1)]][[1]])
# stock
tickers_tmp[i,3]<-stock
# je ne récupère pas les autres valeurs
tickers_list<-paste(tickers_list,tickers_tmp[i,1],sep=",")
}
tickers<-rbind(tickers,tickers_tmp)
}
tickers_list<-substring(tickers_list, 2)
rm(url,script,doc,li,tickers_tmp,i,j,stocks,stock)
View(tickers)
# #############################################################################################"
# all tags are in the tag.csv file
tags<-read.csv("tags.csv",sep=";",header=TRUE)
# concatener tous les tags
# aa2a5bb2b3b4b6cc1c3c4c6c8dd1d2ee1e7e8e9f0f6gg1g3g4g5g6hii5jj1j2j3j4j5j6kk1k2k3k4k5ll1l2l3mm2m3m4m5m6m7m8nn4opp1p2p5p6qrr1r2r5r6r7ss1s6s7t1t6t7t8vv1v7ww1w4xy
names<-c('Ask','Average Daily Volume','Ask Size','Bid','Ask Realtime','Bid Realtime','Book Value','Bid Size','Change & Percent Change','Change','Commission','Currency','Change Realtime','After Hours Change Realtime','Dividend Share','Last Trade Date','Trade Date','Earnings Share','Error Indication returned for symbol changed   invalid','EPS Estimate Current Year','EPS Estimate Next Year','EPS Estimate Next Quarter','Trade Links Additional','Float Shares','Day s Low','Holdings Gain Percent','Annualized Gain','Holdings Gain','Holdings Gain Percent Realtime','Holdings Gain Realtime','Day s High','More Info','Order Book Realtime','52week Low','Market Capitalization','Shares Outstanding','Market Cap Realtime','EBITDA','Change From 52week Low','Percent Change From 52week Low','52week High','Last Trade Realtime With Time','Change Percent Realtime','Last Trade Size','Change From 52week High','Percent Change From 52week High','Last Trade With Time','Last Trade Price Only','High Limit','Low Limit','Day s Range','Day s Range Realtime','50day Moving Average','200day Moving Average','Change From 200day Moving Average','Percent Change From 200day Moving Average','Change From 50day Moving Average','Percent Change From 50day Moving Average','Name','Notes','Open','Previous Close','Price Paid','Change in Percent','Price Sales','Price Book','ExDividend Date','P E Ratio','Dividend Pay Date','P E Ratio Realtime','PEG Ratio','Price EPS Estimate Current Year','Price EPS Estimate Next Year','Symbol','Shares Owned','Revenue','Short Ratio','Last Trade Time','Trade Links','Ticker Trend','1 yr Target Price','Volume','Holdings Value','Holdings Value Realtime','52week Range','Day s Value Change','Day s Value Change Realtime','Stock Exchange','Dividend Yield')
# #############################################################################################"
tickerSymbols<-tickers_list
tagsToRead<-"aa2a5bb2b3b4b6cc1c3c4c6c8dd1d2ee1e7e8e9f0f6gg1g3g4g5g6hii5jj1j2j3j4j5j6kk1k2k3k4k5ll1l2l3mm2m3m4m5m6m7m8nn4opp1p2p5p6qrr1r2r5r6r7ss1s6s7t1t6t7t8vv1v7ww1w4xy"
# #############################################################################################"
URL<-paste("http://download.finance.yahoo.com/d/quotes.csv?s=",tickerSymbols,"&f=",tagsToRead,"&e=.csv",sep="")
destFile<-"quotes.csv"
download.file(URL,destFile)
View(tags)
quotes_now<-read.csv(destFile,sep=",",header=FALSE)
names(quotes_now)<-make.names(names,unique = FALSE, allow_ = TRUE)
View(quotes_now)
quotesPerDay<-data.frame(Date=as.Date(character(0)),Open=numeric(0),High=numeric(0),Low=numeric(0),Close=numeric(0),Volume=integer(0),Adj.Close=numeric(0),Symbol=character(0))
#begin<-Sys.Date()-365*10
#begin<-format(begin,"&a=%m&b=%d&c=%Y")
begin<-"&a=0&b=1&c=1984"
end<-Sys.Date()
end<-format(end,"&d=%m&e=%d&f=%Y")
for (i in 1:nrow(tickers)){
ticker<-tickers[i,1]
url<-paste("http://real-chart.finance.yahoo.com/table.csv?s=",ticker,begin,"&g=d",end,"&ignore=.csv",sep="")
# Download
destFile<-paste("quotesPerDay_",ticker,".csv",sep="")
download.file(url,destFile)
# Read file
rm(quotesPerDay_tmp)
quotesPerDay_tmp<-read.csv(destFile,sep=",",header=TRUE)
quotesPerDay_tmp$Date<-as.Date(quotesPerDay_tmp$Date)
quotesPerDay_tmp$Symbol<-ticker
# Add to all values' file
quotesPerDay<-rbind(quotesPerDay,quotesPerDay_tmp)
if(file.exists(destFile)){file.remove(destFile)}
}
quotesPerDay<-merge(tickers,quotesPerDay,by="Symbol")
quotesPerDay$Symbol<-as.factor(quotesPerDay$Symbol)
quotesPerDay$Name<-as.factor(quotesPerDay$Name)
quotesPerDay$Stock<-as.factor(quotesPerDay$Stock)
str(quotesPerDay)
rm(destFile,begin,end,i,URL,url,quotesPerDay_tmp,ticker)
View(quotesPerDay)
rm(URL,url,destFile,tickers_list,tagsToRead,tickerSymbols,names)
setwd(saveDir)
source("C:/Users/Jawad/Documents/GitHub/prediction-bourse/init.R")
# add dates aggregations
quotesPerDay$year<-as.integer(format(as.POSIXct(quotesPerDay$Date), "%Y"))
quotesPerDay$weekInYear<-as.integer(format(as.POSIXct(quotesPerDay$Date), "%U"))
quotesPerDay$yearWeek<-format(as.POSIXct(quotesPerDay$Date), "%Y-%U")
quotesPerDay$dayInWeek<-as.factor(weekdays(quotesPerDay$Date))
quotesPerDay$dayInYear<-as.integer(format(as.POSIXct(quotesPerDay$Date), "%j"))
quotesPerDay$dayInMonth<-as.integer(format(as.POSIXct(quotesPerDay$Date), "%d"))
View(quotesPerDay)
# max - min de la valeur, en absolu et %
quotesPerDay$varInDay<-quotesPerDay$High-quotesPerDay$Low
quotesPerDay$varInDay_p<-round(100*quotesPerDay$varInDay/quotesPerDay$Open,2)
# max - min de la valeur, moyenne sur une semaine glissante, en absolu et %
thisDayInYear<-as.integer(format(as.POSIXct(Sys.Date()), "%j"))
thisYear<-as.integer(format(as.POSIXct(Sys.Date()), "%Y"))
s<-quotesPerDay[quotesPerDay$year==thisYear & quotesPerDay$dayInYear>thisDayInYear-8,]
w<-aggregate(s$varInDay_p,by=list(s$Name),FUN=mean,na.rm=TRUE)
names(w)<-c("Name","varInDay_p_avg1w")
View(w)
source("C:/Users/Jawad/Documents/GitHub/prediction-bourse/init.R")
name<-"Daimler AG"
sample<-quotesPerDay[quotesPerDay$Name==name,]
g <- ggplot(sample,aes(Date,Close))
g+geom_line()+geom_smooth()+labs(title=paste(name," Quotes per day",sep=""),x="Date", y="Quote at Closing")
g+geom_line()+geom_smooth(method=lm)+labs(title=paste(name," Quotes per day",sep=""),x="Date", y="Quote at Closing")
?geom_smooth
plot(cbind(sample$Close, rollmean(sample$Close, 10)), screen = 1, col = 1:2)
library(zoo)
require(zoo)
install.packages("zoo")
library("zoo", lib.loc="~/R/win-library/3.1")
plot(cbind(sample$Close, rollmean(sample$Close, 10)), screen = 1, col = 1:2)
cbind(sample$Close, rollmean(sample$Close, 10))
head(cbind(sample$Close, rollmean(sample$Close, 10)))
rollmean(sample$Close, 10)
plot(cbind(sample$Date, rollmean(sample$Close, 10)), screen = 1, col = 1:2)
plot(cbind(sample$Date, rollmean(sample$Close, 100)), screen = 1, col = 1:2)
plot(cbind(sample$Date, rollmean(sample$Close, 500)), screen = 1, col = 1:2)
plot(cbind(sample$Date, rollmean(sample$Close, 1000)), screen = 1, col = 1:2)
rollmean(sample$Close, 1000)
plot(cbind(sample$Date, rollmean(sample$Close, 3000)), screen = 1, col = 1:2)
plot(cbind(sample$Date, rollmean(sample$Close, 3000)))#, screen = 1, col = 1:2)
plot(cbind(sample$Date, rollmean(sample$Close, 3000)), screen = 1, col = 1:2)
plot(cbind(sample$Date, rollmean(sample$Close, 50)), screen = 1, col = 1:2)
g <- ggplot(sample,aes(Date,rollmean(sample$Close, 50)))
g+geom_line()
plot(cbind(sample$Date, rollmean(sample$Close, 50)), screen = 1, col = 1:2)
plot(cbind(sample$Date, rollmean(sample$Close, 2000)), screen = 1, col = 1:2)
g <- ggplot(sample,aes(Date,Close))
g+geom_line()+geom_smooth(method=lm)+labs(title=paste(name," Quotes per day",sep=""),x="Date", y="Quote at Closing")
g+geom_line()+geom_smooth()+labs(title=paste(name," Quotes per day",sep=""),x="Date", y="Quote at Closing")
g <- ggplot(sample)
g+geom_line(aes(y = Close, colour = "var0")) + geom_line(aes(y = Open, colour = "var1"))
g <- ggplot(sample, aes(Date))
g+geom_line(aes(y = Close, colour = "var0")) + geom_line(aes(y = Open, colour = "var1"))
g+geom_line(aes(y = Close, colour = "Close")) + geom_line(aes(y = Open, colour = "Open"))
g <- ggplot(sample, aes(Date))
g+geom_line(aes(y = High, colour = "High")) + geom_line(aes(y = Low, colour = "Low"))
sample<-sample[1:365,]
g <- ggplot(sample, aes(Date))
g+geom_line(aes(y = High, colour = "High")) + geom_line(aes(y = Low, colour = "Low"))
quotesPerDay$varInDay<-quotesPerDay$High-quotesPerDay$Low
quotesPerDay$varInDay_p<-round(100*quotesPerDay$varInDay/quotesPerDay$Low,2)
g <- ggplot(sample,aes(Date,varInDay_p))+geom_line()
g <- ggplot(sample,aes(Date,varInDay_p))
g+geom_line()
sample<-quotesPerDay[quotesPerDay$Name==name,]
g <- ggplot(sample,aes(Date,varInDay_p))
g+geom_line()
g+geom_point()
g+geom_point()+geom_smooth()
sample<-sample[1:365*5,]
g <- ggplot(sample,aes(Date,varInDay_p))
g+geom_point()+geom_smooth()
quotesPerDay$Month<-as.integer(format(as.POSIXct(quotesPerDay$Date), "%m"))
quotesPerDay$yearMonth<-format(as.POSIXct(quotesPerDay$Date), "%Y-%m")
View(quotesPerDay)
vol_month<-aggregate(quotesPerDay$varInDay_p,by=list(quotesPerDay$Month),FUN=mean,na.rm=TRUE)
names(vol_month)<-c("Month","varInDay_p_avg1M")
View(vol_month)
g <- ggplot(vol_month,aes(Month,varInDay_p_avg1M))
g+geom_point()
g+geom_line()
vol_yearmonth<-aggregate(quotesPerDay$varInDay_p,by=list(quotesPerDay$yearMonth),FUN=mean,na.rm=TRUE)
names(vol_yearmonth)<-c("Month","varInDay_p_avg1YM")
g <- ggplot(vol_yearmonth,aes(yearMonth,varInDay_p_avg1YM))
g+geom_line()
names(vol_yearmonth)<-c("yearMonth","varInDay_p_avg1YM")
g <- ggplot(vol_yearmonth,aes(yearMonth,varInDay_p_avg1YM))
g+geom_line()
vol_yearmonth
g+geom_point()
vol_yearmonth<-vol_yearmonth[vol_yearmonth$yearMonth>"2000-01"]
vol_yearmonth<-vol_yearmonth[vol_yearmonth$yearMonth>"2000-01",]
vol_yearmonth
vol_yearmonth<-vol_yearmonth[vol_yearmonth$yearMonth>="2000-01",]
vol_yearmonth<-aggregate(quotesPerDay$varInDay_p,by=list(quotesPerDay$yearMonth),FUN=mean,na.rm=TRUE)
names(vol_yearmonth)<-c("yearMonth","varInDay_p_avg1YM")
vol_yearmonth<-vol_yearmonth[vol_yearmonth$yearMonth>="2000-01",]
g <- ggplot(vol_yearmonth,aes(yearMonth,varInDay_p_avg1YM))
g+geom_point()
g+geom_line()
g+geom_point()
name<-"BNP Paribas SA"
sample<-quotesPerDay[quotesPerDay$Name==name,]
sample<-sample[1:365*5,]
# Quotes per day
g <- ggplot(sample,aes(Date,Close))
g+geom_line()+labs(title=paste(name," Quotes per day",sep=""),x="Date", y="Quote at Closing")
g <- ggplot(sample, aes(Date))
g+geom_line(aes(y = Close, colour = "Close")) + geom_line(aes(y = Open, colour = "Open"))
g <- ggplot(sample, aes(Date))
g+geom_line(aes(y = High, colour = "High")) + geom_line(aes(y = Low, colour = "Low"))
# Volatilité
g <- ggplot(sample,aes(Date,varInDay_p))
g+geom_point()+geom_smooth()
g <- ggplot(vol_month,aes(Month,varInDay_p_avg1M))
g+geom_line()
g <- ggplot(vol_yearmonth,aes(yearMonth,varInDay_p_avg1YM))
g+geom_point()
g+geom_point()+geom_smooth()
g <- ggplot(vol_yearmonth,aes(yearMonth,varInDay_p_avg1YM,group = 1))
g+geom_point()+geom_smooth()
