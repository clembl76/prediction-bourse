colors()
?Devices
library(datasets)
data(airquality)
library(ggplot2)
str(airquality)
airquality = transform(airquality, Month = factor(Month))
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
library(ggplot2)
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
data(movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
require(xlsx)
library(xlsx)
install.packages("xlsx")
require(xlsx)
install.packages("rJava")
library("rJava", lib.loc="~/R/win-library/3.1")
require(rJava)
setwd("C:/Users/Jawad/Documents/GitHub/prediction-bourse/")
Sys.setenv(LANG = "en")
Sys.setlocale( "LC_TIME", "English" )
setwd("C:/Users/Jawad/Documents/GitHub/prediction-bourse/Data/")
dir<-getwd()
dir
dir<-paste(getwd(),"euronext/",sep="")
dir
dir<-paste(getwd(),"/euronext/",sep="")
dir
dir<-paste(getwd(),"/euronext/",sep="")
# FTP de EuroNext
URL<-"ftp://ftp.nyxdata.com/Historical Data Samples/Euronext NextHistory Cash/"
## ######################################################################################################
## Jours où le marché est ouvert
## ######################################################################################################
#download
zipFileName<-"Euronext-CAL-20100615.csv.zip"
fileName<-"BDM-Euronext-CAL-20100615.csv"
download.file(paste(URL,zipFileName,sep=""),zipFileName)
#unzip
unzip(zipfile=zipFileName)
setwd(dir)
dir<-paste(getwd(),"/euronext/",sep="")
setwd("C:/Users/Jawad/Documents/GitHub/prediction-bourse/")
getwd()
dataDir<-paste(getwd(),"/Data/",sep="")
dir<-paste(dataDir,"/euronext/",sep="")
setwd(dir)
getwd()
# FTP de EuroNext
URL<-"ftp://ftp.nyxdata.com/Historical Data Samples/Euronext NextHistory Cash/"
## ######################################################################################################
## Jours où le marché est ouvert
## ######################################################################################################
#download
zipFileName<-"Euronext-CAL-20100615.csv.zip"
fileName<-"BDM-Euronext-CAL-20100615.csv"
download.file(paste(URL,zipFileName,sep=""),zipFileName)
unzip(zipfile=zipFileName)
file.remove(zipFileName)
setwd("C:/Users/Jawad/Documents/GitHub/prediction-bourse/")
saveDir<-getwd()
dataDir<-paste(getwd(),"/Data/",sep="")
dir<-paste(dataDir,"/euronext/",sep="")
setwd(dir)
# FTP de EuroNext
URL<-"ftp://ftp.nyxdata.com/Historical Data Samples/Euronext NextHistory Cash/"
## ######################################################################################################
## Jours où le marché est ouvert
## ######################################################################################################
#download
zipFileName<-"Euronext-CAL-20100615.csv.zip"
fileName<-"BDM-Euronext-CAL-20100615.csv"
download.file(paste(URL,zipFileName,sep=""),zipFileName)
#unzip
unzip(zipfile=zipFileName)
file.remove(zipFileName)
setwd(saveDir)
getwd()
saveDir<-getwd()
dataDir<-paste(getwd(),"/Data/",sep="")
dir<-paste(dataDir,"/euronext/",sep="")
setwd(dir)
#loading and preprocessing data
fileName<-"BDM-Euronext-CAL-20100615.csv"
tradingDays <- read.csv(fileName,sep=";",header=TRUE)
tradingDays$Calendar.date<-as.Date(tradingDays$Calendar.date)
tradingDays$Trading.day.indicator<-as.logical(tradingDays$Trading.day.indicator)
tradingDays
install.packages("XML")
library(XML)
doc<-xmlTreeParse("http://www.zonebourse.com/rss/FeedAnalyses.php?type=Actions")
xmlRoot(doc)
src<-xpathApply(xmlRoot(doc), "//item")
src
for (i in 1:length(src)) {
if (i==1) {
foo<-xmlSApply(src[[i]], xmlValue)
DATA<-data.frame(t(foo), stringsAsFactors=FALSE)
}
else {
foo<-xmlSApply(src[[i]], xmlValue)
tmp<-data.frame(t(foo), stringsAsFactors=FALSE)
DATA<-rbind(DATA, tmp)
}
}
View(DATA)
getRSSitems <- function(type,print=TRUE) {
RSSURL<-paste("http://www.zonebourse.com/rss/FeedAnalyses.php?type=",type,sep="")
doc<-xmlTreeParse(RSSURL)
#xmlRoot(doc)
src<-xpathApply(xmlRoot(doc), "//item")
for (i in 1:length(src)) {
if (i==1) {
foo<-xmlSApply(src[[i]], xmlValue)
DATA<-data.frame(t(foo), stringsAsFactors=FALSE)
}
else {
foo<-xmlSApply(src[[i]], xmlValue)
tmp<-data.frame(t(foo), stringsAsFactors=FALSE)
DATA<-rbind(DATA, tmp)
}
}
# result <- list(center=center,spread=spread)
return(DATA)
}
Actions <- getRSSitems("Actions")
Indices <- getRSSitems("Indices")
View(Actions)
View(Indices)
